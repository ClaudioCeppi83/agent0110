import sys
import logging
from PyQt6.QtWidgets import (
    QApplication,
    QMainWindow,
    QWidget,
    QVBoxLayout,
    QHBoxLayout,
    QMenuBar,
    QMenu,
    QTabWidget,
    QTextEdit,
    QPushButton,
    QComboBox,
)
from PyQt6.QtCore import Qt






from src.gui.pyte_terminal import PyteTerminal
from src.core.ollama import OllamaClient


class MainWindow(QMainWindow):
    """Main application window for Agente 0110."""
    def __init__(self):
        # Configure logging
        logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
        logging.info("Initializing main window.")

        super().__init__()
        # Window geometry constants
        WINDOW_X = 100
        WINDOW_Y = 100
        WINDOW_WIDTH = 800
        WINDOW_HEIGHT = 600

        # Instantiate OllamaClient
        self.ollama_client = OllamaClient()

        self.setWindowTitle("Agente 0110")
        self.setGeometry(WINDOW_X, WINDOW_Y, WINDOW_WIDTH, WINDOW_HEIGHT)

        # Create the central widget
        central_widget = QWidget()
        self.setCentralWidget(central_widget)

        # Set up the main layout and its components
        self.setup_main_layout(central_widget)

        self.setup_menu_bar()  # Set up the menu bar

        

    def setup_menu_bar(self):
        """Sets up the main menu bar with its menus and actions."""
        menu_bar = QMenuBar(self)
        modelos_menu = QMenu("Modelos", self)
        modelos_menu.addAction("Seleccionar Modelo")
        menu_bar.addMenu(modelos_menu)

        mcps_menu = QMenu("MCPs", self)
        mcps_menu.addAction("Gestionar MCPs")
        menu_bar.addMenu(mcps_menu)

        configuracion_menu = QMenu("Configuraci√≥n", self)
        configuracion_menu.addAction("Opciones")
        menu_bar.addMenu(configuracion_menu)

        self.setMenuBar(menu_bar)

    def setup_main_layout(self, central_widget):
        """Sets up the main vertical layout for the central widget, including the model selector, terminal tabs, and input area."""
        main_layout = QVBoxLayout(central_widget)

        # Set up the model selector (combobox)
        self.setup_model_selector(main_layout)

        # The model_selector allows the user to choose which model to use for generating responses.
        
        # Setup the terminal tabs
        self.setup_terminal_tabs(main_layout)

        # Setup the input area (prompt input and send button)
        self.setup_input_area(main_layout)
    
    def setup_model_selector(self, main_layout):
        """Sets up the model selector QComboBox, populating it with available models and connecting its signal."""
        self.model_selector = QComboBox()
        model_list = self.ollama_client.list_models()
        self.model_selector.addItems(model_list)
        # Connect the currentIndexChanged signal to the on_model_changed slot
        self.model_selector.currentIndexChanged.connect(self.on_model_changed)
        main_layout.addWidget(self.model_selector)

    def setup_terminal_tabs(self, main_layout):
        """Creates and configures the terminal tabs (logs and output) using PyteTerminal."""
        self.terminal_tabs = QTabWidget()
        self.logs_terminal = PyteTerminal()
        self.output_terminal = PyteTerminal()
        # The logs_terminal will be used to display logs and error messages.
        self.terminal_tabs.addTab(self.logs_terminal, "Logs")
        # The output_terminal will be used to display the responses generated by Ollama.
        self.terminal_tabs.addTab(self.output_terminal, "Output")
        main_layout.addWidget(self.terminal_tabs)
    
    def setup_input_area(self, main_layout):
        """Creates and configures the prompt input (QTextEdit) and send button (QPushButton) with their layout."""
        self.prompt_input = QTextEdit()
        # This input will be used to enter the prompt for the model.
        self.send_button = QPushButton("Send")
        # Connect the clicked signal of the send button to the on_send_clicked slot.
        self.send_button.clicked.connect(self.on_send_clicked)

        input_layout = QHBoxLayout()
        input_layout.addWidget(self.prompt_input)
        input_layout.addWidget(self.send_button)
        main_layout.addLayout(input_layout)

    def on_model_changed(self, index):
        """Slot to handle model selection changes. This is called when the user selects a different model in the model_selector."""
        model_name = self.model_selector.currentText()
        logging.info(f"Selected model changed to: {model_name}")


    def on_send_clicked(self):
        """Slot to handle send button clicks. This is called when the user clicks the send button to send a prompt to Ollama."""

        prompt_text = self.prompt_input.toPlainText()
        selected_model = self.model_selector.currentText()
        logging.info(f"Sending prompt: {prompt_text} with model: {selected_model}")

        print(f"Prompt: {prompt_text}\nModel: {selected_model}")
        response = self.ollama_client.generate_response(prompt_text, selected_model)
        if response:
            self.output_terminal.write(response)
            logging.info("Displaying response in output terminal.")




if __name__ == '__main__':
    app = QApplication(sys.argv)
    main_window = MainWindow()
    main_window.show()
    sys.exit(app.exec())